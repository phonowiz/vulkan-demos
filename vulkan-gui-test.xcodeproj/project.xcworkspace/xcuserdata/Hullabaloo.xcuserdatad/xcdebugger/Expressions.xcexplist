<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "MVKQueueSubmission::recordResult(VkResult):MVKQueue.mm">
      </ContextState>
      <ContextState
         contextName = "_glfwInitVulkan:vulkan.c">
         <PersistentStrings>
            <PersistentString
               value = "ep[i]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::createRenderPass():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_swapChainData.swapChainImageFormat">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "std::__1::lock_guard&lt;std::__1::mutex&gt;::lock_guard(std::__1::mutex&amp;) [inlined]:__mutex_base">
      </ContextState>
      <ContextState
         contextName = "EasyImage::upload(VkDevice_T* const&amp;, VkPhysicalDevice_T*, VkCommandPool_T*, VkQueue_T*):easy_image.h">
         <PersistentStrings>
            <PersistentString
               value = "int x = VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKConfigurableObject::getConfigurationResult():MVKBaseObject.h">
         <PersistentStrings>
            <PersistentString
               value = "_configurationResult">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Material::initShaderParameters():material.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_uniformBuffers[pair.first]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::createSemaphores():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_inFlightFences">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKCommandBuffer::getRecordingResult():MVKCommandBuffer.h">
      </ContextState>
      <ContextState
         contextName = "MVKCmdBindDescriptorSets::encode(MVKCommandEncoder*):MVKCmdPipeline.mm">
      </ContextState>
      <ContextState
         contextName = "vk::SwapChain::createSwapChain():swap_chain.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_swapChainData.swapChain">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::recordCommandBuffers():renderer.cpp">
      </ContextState>
      <ContextState
         contextName = "HelloTriangleApplication::createFramebuffers():main-test.mm">
         <PersistentStrings>
            <PersistentString
               value = "swapChainExtent">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "startVulkan():main.mm">
         <PersistentStrings>
            <PersistentString
               value = "&amp;device">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Shader::initShader(char const*, vk::Shader::ShaderType, char const*):shader.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_physicalDevice-&gt;_device">
            </PersistentString>
            <PersistentString
               value = "_pipelineShaderStage">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKDescriptorSetLayout::bindDescriptorSet(MVKCommandEncoder*, MVKDescriptorSet*, MVKShaderResourceBinding&amp;, std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt; &gt;&amp;, unsigned int*):MVKDescriptorSet.mm">
         <PersistentStrings>
            <PersistentString
               value = "descSet-&gt;_bindings">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::draw():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_inFlightFences">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::SwapChain::createImageViews():swap_chain.cpp">
      </ContextState>
      <ContextState
         contextName = "MVKRenderSubpass::getColorAttachmentFormat(unsigned int):MVKRenderPass.mm">
         <PersistentStrings>
            <PersistentString
               value = "_renderPass-&gt;_attachments">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "::___ZN25MVKRenderPipelineCompiler25newMTLRenderPipelineStateEP27MTLRenderPipelineDescriptor_block_invoke():MVKPipeline.mm">
         <PersistentStrings>
            <PersistentString
               value = "ps">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::createPipeline():renderer.cpp">
      </ContextState>
      <ContextState
         contextName = "vk::SwapChain::createFrameBuffers(VkRenderPass_T*):swap_chain.cpp">
      </ContextState>
      <ContextState
         contextName = "createImage(VkDevice_T*, VkPhysicalDevice_T*, unsigned int, unsigned int, VkFormat, VkImageTiling, unsigned int, unsigned int, VkImage_T*&amp;, VkDeviceMemory_T*&amp;):vulkan_utils.h">
      </ContextState>
      <ContextState
         contextName = "::vkCreatePipelineLayout(VkDevice, const VkPipelineLayoutCreateInfo *, const VkAllocationCallbacks *, VkPipelineLayout *):vulkan.mm">
      </ContextState>
   </ContextStates>
</VariablesViewState>
