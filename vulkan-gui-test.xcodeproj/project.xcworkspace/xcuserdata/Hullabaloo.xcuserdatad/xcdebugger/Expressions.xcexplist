<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "::vkCreatePipelineLayout(VkDevice, const VkPipelineLayoutCreateInfo *, const VkAllocationCallbacks *, VkPipelineLayout *):vulkan.mm">
      </ContextState>
      <ContextState
         contextName = "_glfwInitVulkan:vulkan.c">
         <PersistentStrings>
            <PersistentString
               value = "ep[i]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::renderer::add_attachment(vk::renderer::attachment const&amp;, unsigned int):renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_attachments[1]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "std::__1::lock_guard&lt;std::__1::mutex&gt;::lock_guard(std::__1::mutex&amp;) [inlined]:__mutex_base">
      </ContextState>
      <ContextState
         contextName = "vk::Material::createDescriptorSet():material.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_descriptorSetLayoutBindings[0]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::pipeline::create(VkRenderPass_T*, unsigned int, unsigned int):pipeline.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_material">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Material::setImageSampler(vk::Texture2D*, char const*, vk::Material::ParameterStage, unsigned int):material.cpp">
      </ContextState>
      <ContextState
         contextName = "MVKGraphicsResourcesCommandEncoderState::encodeImpl()::$_1::operator()(MVKCommandEncoder*, MVKMTLBufferBinding&amp;) const:MVKCommandEncoderState.mm">
         <PersistentStrings>
            <PersistentString
               value = "this-&gt;_areVertexBufferBindingsDirty">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "main:main.mm">
      </ContextState>
      <ContextState
         contextName = "vk::renderer::create_command_buffer(VkCommandBuffer_T***):renderer.cpp">
      </ContextState>
      <ContextState
         contextName = "MVKShaderModule::getMTLFunction(mvk::SPIRVToMSLConverterContext*, VkSpecializationInfo const*, MVKPipelineCache*):MVKShaderModule.mm">
         <PersistentStrings>
            <PersistentString
               value = "_accessLock">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Material::createDescriptorPool():material.cpp">
      </ContextState>
      <ContextState
         contextName = "vk::Texture::create(unsigned int, unsigned int):texture.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_device">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKCmdBindDescriptorSets::encode(MVKCommandEncoder*):MVKCmdPipeline.mm">
      </ContextState>
      <ContextState
         contextName = "MVKCommandBuffer::getRecordingResult():MVKCommandBuffer.h">
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::createRenderPass():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_swapChainData.swapChainImageFormat">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::material::create_descriptor_sets():material.cpp">
         <PersistentStrings>
            <PersistentString
               value = "pair2.first">
            </PersistentString>
            <PersistentString
               value = "write_descriptor_sets[count].dstBinding">
            </PersistentString>
            <PersistentString
               value = " _descriptor_set_layout_bindings[count].binding">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::deferred_renderer::recreate_renderer():deferred_renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_swapchain-&gt;_swapchain_data.swapchain_extent.width">
            </PersistentString>
            <PersistentString
               value = "_swapchain-&gt;_swapchain_data.swapchain_extent.height">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKCmdDrawIndexed::encode(MVKCommandEncoder*):MVKCmdDraw.mm">
         <PersistentStrings>
            <PersistentString
               value = "cmdEncoder-&gt;_mtlPrimitiveType">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::recordCommandBuffers():renderer.cpp">
      </ContextState>
      <ContextState
         contextName = "MVKRenderSubpass::getColorAttachmentFormat(unsigned int):MVKRenderPass.mm">
         <PersistentStrings>
            <PersistentString
               value = "_renderPass-&gt;_attachments">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "EasyImage::upload(VkDevice_T* const&amp;, VkPhysicalDevice_T*, VkCommandPool_T*, VkQueue_T*):easy_image.h">
         <PersistentStrings>
            <PersistentString
               value = "int x = VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Material::initShaderParameters():material.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_uniformBuffers[pair.first]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::createSemaphores():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_inFlightFences">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Texture2D::create(unsigned int, unsigned int):texture.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_device-&gt;_commandPool">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::SwapChain::createFrameBuffers(VkRenderPass_T*):swap_chain.cpp">
      </ContextState>
      <ContextState
         contextName = "vk::SwapChain::createImageViews():swap_chain.cpp">
      </ContextState>
      <ContextState
         contextName = "MVKDescriptorSetLayout::bindDescriptorSet(MVKCommandEncoder*, MVKDescriptorSet*, MVKShaderResourceBinding&amp;, std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt; &gt;&amp;, unsigned int*):MVKDescriptorSet.mm">
         <PersistentStrings>
            <PersistentString
               value = "descSet-&gt;_bindings">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKConfigurableObject::getConfigurationResult():MVKBaseObject.h">
         <PersistentStrings>
            <PersistentString
               value = "_configurationResult">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "HelloTriangleApplication::createFramebuffers():main-test.mm">
         <PersistentStrings>
            <PersistentString
               value = "swapChainExtent">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::deferred_renderer::deferred_renderer(vk::device*, GLFWwindow*, vk::swapchain*, vk::material_store&amp;):deferred_renderer.cpp">
      </ContextState>
      <ContextState
         contextName = "vk::SwapChain::createSwapChain():swap_chain.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_swapChainData.swapChain">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::resource::create_buffer(VkDevice_T*, VkPhysicalDevice_T*, unsigned long long, unsigned int, VkBuffer_T*&amp;, unsigned int, VkDeviceMemory_T*&amp;):resource.cpp">
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::createPipeline():renderer.cpp">
      </ContextState>
      <ContextState
         contextName = "vk::deferred_renderer::create_render_pass():deferred_renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_normals._format">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "startVulkan():main.mm">
         <PersistentStrings>
            <PersistentString
               value = "&amp;device">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "::___ZN25MVKRenderPipelineCompiler25newMTLRenderPipelineStateEP27MTLRenderPipelineDescriptor_block_invoke():MVKPipeline.mm">
         <PersistentStrings>
            <PersistentString
               value = "ps">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::deferred_renderer::create_frame_buffers():deferred_renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_normals">
            </PersistentString>
            <PersistentString
               value = "_swapchain-&gt;_swapchain_data.swapchain_extent.width">
            </PersistentString>
            <PersistentString
               value = "_swapchain-&gt;_swapchain_data.swapchain_extent.height">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::renderer::create_frame_buffers():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_swapchain-&gt;_swapchain_data.swapchain_extent.width">
            </PersistentString>
            <PersistentString
               value = "_swapchain-&gt;_swapchain_data.swapchain_extent.height">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::material::create_descriptor_set_layout():material.cpp">
         <PersistentStrings>
            <PersistentString
               value = "(VkDescriptorType)_descriptor_set_layout_bindings[count].descriptorType">
            </PersistentString>
            <PersistentString
               value = "pair.first">
            </PersistentString>
            <PersistentString
               value = "pair2.first">
            </PersistentString>
            <PersistentString
               value = "_sampler_buffers.size()">
            </PersistentString>
            <PersistentString
               value = "pair2.second.binding">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::mesh::draw(VkCommandBuffer_T*, vk::pipeline&amp;):mesh.cpp">
         <PersistentStrings>
            <PersistentString
               value = "">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "createImage(VkDevice_T*, VkPhysicalDevice_T*, unsigned int, unsigned int, VkFormat, VkImageTiling, unsigned int, unsigned int, VkImage_T*&amp;, VkDeviceMemory_T*&amp;):vulkan_utils.h">
      </ContextState>
      <ContextState
         contextName = "vk::graphics_pipeline::create(VkRenderPass_T*, unsigned int, unsigned int):graphics_pipeline.cpp">
         <PersistentStrings>
            <PersistentString
               value = "pipeline_create_info.pStages[0]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Renderer::draw():renderer.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_inFlightFences">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKDescriptorBinding::writeBindings(unsigned int, unsigned int, unsigned int, unsigned long, void const*):MVKDescriptorSet.mm">
         <PersistentStrings>
            <PersistentString
               value = "_bufferBindings[0]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKQueueSubmission::recordResult(VkResult):MVKQueue.mm">
      </ContextState>
      <ContextState
         contextName = "vk::Shader::initShader(char const*, vk::Shader::ShaderType, char const*):shader.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_physicalDevice-&gt;_device">
            </PersistentString>
            <PersistentString
               value = "_pipelineShaderStage">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "vk::Material::createDescriptorSetLayout():material.cpp">
         <PersistentStrings>
            <PersistentString
               value = "_descriptorSetLayoutBindings">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MVKPipelineLayout::MVKPipelineLayout(MVKDevice*, VkPipelineLayoutCreateInfo const*):MVKPipeline.mm">
         <PersistentStrings>
            <PersistentString
               value = "_descriptorSetLayouts[0]">
            </PersistentString>
            <PersistentString
               value = "_descriptorSetLayouts">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
   </ContextStates>
</VariablesViewState>
